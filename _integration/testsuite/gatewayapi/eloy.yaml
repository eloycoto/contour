# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

import data.contour.resources

# Ensure that cert-manager is installed.
# Version check the certificates resource.

Group := "cert-manager.io"
Version := "v1"

have_certmanager_version {
  v := resources.versions["certificates"]
  v[_].Group == Group
  v[_].Version == Version
}

skip[msg] {
  not resources.is_supported("certificates")
  msg := "cert-manager is not installed"
}

skip[msg] {
  not have_certmanager_version

  avail := resources.versions["certificates"]

  msg := concat("\n", [
    sprintf("cert-manager version %s/%s is not installed", [Group, Version]),
    "available versions:",
    yaml.marshal(avail)
  ])
}

---

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned
spec:
  selfSigned: {}

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: secure.projectcontour.io
spec:
  dnsNames:
  - conditions.projectcontour.io
  - secure.projectcontour.io
  secretName: secure
  issuerRef:
    name: selfsigned

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-default

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-default

---

apiVersion: networking.x-k8s.io/v1alpha1
kind: GatewayClass
metadata:
  name: contour-class
spec:
  controller: projectcontour.io/ingress-controller

---

apiVersion: networking.x-k8s.io/v1alpha1
kind: Gateway
metadata:
  name: contour
  namespace: projectcontour
spec:
  gatewayClassName: contour-class
  listeners:
    - protocol: HTTP
      port: 80
      routes:
        kind: HTTPRoute
        selector:
          matchLabels:
            app: filter
    - protocol: HTTPS
      port: 443
      routes:
        kind: HTTPRoute
        selector:
          matchLabels:
            app: filter
---

apiVersion: networking.x-k8s.io/v1alpha1
kind: HTTPRoute
metadata:
  name: http-filter
  labels:
    app: filter
spec:
  hostnames:
    - conditions.projectcontour.io
    - secure.projectcontour.io
  tls:
    certificateRef:
      group: core
      kind: Secret
      name: secure
  rules:
    - matches:
      - path:
          type: Prefix
          value: /
      forwardTo:
      - serviceName: echo-slash-default
        port: 80

---


import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

cases := [
  [ "/", "echo-slash-default" ],
  # [ "/foo", "echo-slash-default" ],
  # [ "/path/prefix", "echo-slash-noprefix" ],
  # [ "/path/prefixfoo", "echo-slash-noprefix" ],
  # [ "/path/prefix/", "echo-slash-prefix" ],
  # [ "/path/prefix/foo", "echo-slash-prefix" ],
]

# NOTE(jpeach): the path formatting matters in the request construction
# below, since we are testing for specific matches.
request_for_path[path] = request {
  path := cases[_][0]
  request := {
    "method": "GET",
   "url": url.https(path),
    "headers": {
      "Host": "secure.projectcontour.io",
      "User-Agent": client.ua("path-condition-match"),
    }
  }
}

response_for_path [path] = resp {
  path := cases[_][0]
  request := request_for_path[path]
  resp := http.send(request)
}

# Ensure that we get a response for each test case.
error_missing_responses {
  count(cases) != count(response_for_path)
}

check_for_status_code [msg] {
  path := cases[_][0]
  resp := response_for_path[path]
  msg := expect.response_status_is(resp, 200)
}
